generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model appointment {
  id                                            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date_time                                     DateTime @db.Timestamp(6)
  healthcare_provider_id                        String   @db.Uuid
  guest_id                                      String   @db.Uuid
  created_at                                    DateTime @default(now()) @db.Timestamp(6)
  updated_at                                    DateTime @default(now()) @db.Timestamp(6)
  user_appointment_guest_idTouser               user     @relation("appointment_guest_idTouser", fields: [guest_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_appointment_healthcare_provider_idTouser user     @relation("appointment_healthcare_provider_idTouser", fields: [healthcare_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model insurance_policy {
  id                    String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organization_id       String       @db.Uuid
  insurance_provider_id String       @db.Uuid
  created_at            DateTime     @default(now()) @db.Timestamp(6)
  updated_at            DateTime     @default(now()) @db.Timestamp(6)
  user                  user         @relation(fields: [insurance_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organization          organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description      String?            @db.VarChar(255)
  image            String?            @db.VarChar(255)
  name             String             @db.VarChar(255)
  created_at       DateTime           @default(now()) @db.Timestamp(6)
  updated_at       DateTime           @default(now()) @db.Timestamp(6)
  user_id          String             @db.Uuid
  tenant_id        String             @db.VarChar(255)
  insurance_policy insurance_policy[]
  user             user               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model patient_record {
  id                                         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  medical_staff_id                           String   @db.Uuid
  guest_id                                   String   @db.Uuid
  created_at                                 DateTime @default(now()) @db.Timestamp(6)
  updated_at                                 DateTime @default(now()) @db.Timestamp(6)
  user_patient_record_guest_idTouser         user     @relation("patient_record_guest_idTouser", fields: [guest_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_patient_record_medical_staff_idTouser user     @relation("patient_record_medical_staff_idTouser", fields: [medical_staff_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id                                                   String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                                String             @unique @db.VarChar(255)
  firstName                                            String?            @db.VarChar(255)
  lastName                                             String?            @db.VarChar(255)
  roq_user_id                                          String             @db.VarChar(255)
  tenant_id                                            String             @db.VarChar(255)
  created_at                                           DateTime           @default(now()) @db.Timestamp(6)
  updated_at                                           DateTime           @default(now()) @db.Timestamp(6)
  appointment_appointment_guest_idTouser               appointment[]      @relation("appointment_guest_idTouser")
  appointment_appointment_healthcare_provider_idTouser appointment[]      @relation("appointment_healthcare_provider_idTouser")
  insurance_policy                                     insurance_policy[]
  organization                                         organization[]
  patient_record_patient_record_guest_idTouser         patient_record[]   @relation("patient_record_guest_idTouser")
  patient_record_patient_record_medical_staff_idTouser patient_record[]   @relation("patient_record_medical_staff_idTouser")
}
